@page "/createorder"
@inject HttpClient http

<h3>Bestellung erstellen</h3>

<EditForm Model="order" OnValidSubmit="OnValidSubmit">
	<DataAnnotationsValidator />

	<label>Datum</label>
	<InputDate class="col-lg-5" @bind-Value="order.Date"></InputDate>
	<br />
	<label>Kunde</label>
	<InputSelect class="col-lg-5" @bind-Value="order.CustomerId">
		@foreach(CustomerDto customer in Customers)
		{
			<option value="customer.Id">@customer.FirstName @customer.LastName</option>
		}
	</InputSelect>
	<br />
	<label>Artikel</label>
	<select class="col-lg-5">
		@foreach(ItemDto item in Items)
		{
			<option onclick="() => @AddItem(item)">@item.Name</option>
		}
	</select>
	<h4>Items</h4>
	@foreach(ItemDto item in SelectedItems)
	{
		<p>@item.Name</p>
		<p></p>
	}
	<br />
	<button type="submit">Anlegen</button>
</EditForm>


@code {
	List<CustomerDto> Customers;
	List<ItemDto> Items;

	List<ItemDto> SelectedItems = new();
	OrderCreateEditDto order = new();

	protected override async void OnInitialized()
	{
		Customers = await Api.Get<List<CustomerDto>>("http://localhost:5244/api/customer", http);
		Items = await Api.Get<List<ItemDto>>("http://localhost:5244/api/item", http);
		StateHasChanged();
	}

	protected async void OnValidSubmit()
	{
		order.Items = SelectedItems;
		OrderDto result = await Api.Post<OrderDto>("http://localhost:5244/api/createorder", order, http);
	}

	private object AddItem(ItemDto item)
	{
		if (!SelectedItems.Contains(item))
			SelectedItems.Add(item);
		else
			SelectedItems.Remove(item);
		StateHasChanged();
		return " ";
	}
}
